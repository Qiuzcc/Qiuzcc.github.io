<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端开发——JavaScript</title>
    <link href="/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94JavaScript/"/>
    <url>/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94JavaScript/</url>
    
    <content type="html"><![CDATA[<p>JavaScript是异步的</p><span id="more"></span><h3 id="一、Callback-回调机制"><a href="#一、Callback-回调机制" class="headerlink" title="一、Callback(回调机制)"></a>一、Callback(回调机制)</h3><p>JavaScript是异步执行的，看以下例子</p><ul><li>例一，</li></ul><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">first</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">second</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-title function_">first</span>();<br><span class="hljs-title function_">second</span>();<br>输出结果为:<span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>例二</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">first</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    &#125;,<span class="hljs-number">500</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">second</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-title function_">first</span>();<br><span class="hljs-title function_">second</span>();<br>输出结果为:<span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>解释：JavaScript是异步的，所有延迟处理会被放到循环队列里</p><p><strong>简单的定义：</strong>回调就是一个在另外一个函数执行完后要执行的函数</p><p><strong>定义方式：</strong>在函数定义时，加入一个callback参数</p><p><strong>调用方式：</strong>调用函数时，直接在callback参数位置定义回调执行的函数体（例一）；在callback参数位置传入另外一个函数名作为回调函数执行（例二）</p><p>见下面例子：</p><ul><li>例一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doHomework</span>(<span class="hljs-params">subject,callback</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;do $&#123;subject&#125; homework&#x27;</span>);<br>&#125;;<br><br><span class="hljs-title function_">doHomework</span>(<span class="hljs-string">&#x27;math&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finish math homework&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>例二</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doHomework</span>(<span class="hljs-params">subject,callback</span>)&#123;<br>conse.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;do $&#123;subject&#125; homework&#x27;</span>);<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">finishHomework</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finish homework&#x27;</span>);<br>&#125;;<br><br><span class="hljs-title function_">doHomework</span>(<span class="hljs-string">&#x27;math&#x27;</span>,finishHomework);<br></code></pre></td></tr></table></figure><h3 id="二、Async"><a href="#二、Async" class="headerlink" title="二、Async"></a>二、Async</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p>作为一个关键字放到函数前面，用于表示函数是一个异步函数，异步函数也就意味着该函数的执行不会阻塞后面代码的执行。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;)<br>&#125;<br><span class="hljs-title function_">timeout</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello2&#x27;</span>)<br>输出结果：<br>hello2<br>hello<br></code></pre></td></tr></table></figure><p>async 函数返回的是一个promise 对象，如果要获取到promise 返回值，我们应该用then 方法</p><h4 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h4><p><strong>await 关键字只能放到async 函数里面</strong></p><p>await后面可以放任何表达式，更多的是放一个返回promise 对象的表达式，使用await关键字之后，表示等待异步函数执行完成之后，才继续执行后面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doubleAfter2seconds</span>(<span class="hljs-params">num</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-title function_">resovle</span>(<span class="hljs-number">2</span> * num)<br>        &#125;,<span class="hljs-number">2000</span>);<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">testResult</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> result1= <span class="hljs-keyword">await</span> <span class="hljs-title function_">doubleAfter2seconds</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">let</span> result2= <span class="hljs-keyword">await</span> <span class="hljs-title function_">doubleAfter2seconds</span>(<span class="hljs-number">20</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1+result2);<br>&#125;<br><span class="hljs-title function_">testResult</span>();<br><span class="hljs-number">4</span>秒后，输出结果:<br><span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p><strong>捕获错误，使用try-catch的方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">testResult</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">let</span> result1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">doubleAfter2seconds</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">let</span> result2= <span class="hljs-keyword">await</span> <span class="hljs-title function_">doubleAfter2seconds</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1+result2);<br>&#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解决“回调地狱”问题"><a href="#解决“回调地狱”问题" class="headerlink" title="解决“回调地狱”问题"></a>解决“回调地狱”问题</h4><p>Async.js可将一系列函数粘连起来，既可以是串行，也可以是并行。</p><p>使用之前需要先安装async包，</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install <span class="hljs-keyword">async</span> —-save<br></code></pre></td></tr></table></figure><p>场景实例：先后读取两个文本数据，按顺序展示文本</p><ul><li>使用callback回调的方式，嵌套读取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs  = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<br>    <span class="hljs-string">&#x27;a-text-file.txt&#x27;</span>,      <span class="hljs-comment">//读取第一个文本</span><br>    <span class="hljs-string">&#x27;utf8&#x27;</span>,                <br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">err,text</span>) &#123;    <span class="hljs-comment">//读取完成，回调</span><br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);           <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;First text file:&#x27;</span>,text);    <span class="hljs-comment">//显示第一段文本</span><br>            fs.<span class="hljs-title function_">readFile</span>(<br>                <span class="hljs-string">&#x27;another-text-file.txt&#x27;</span>,  <span class="hljs-comment">//读取第二个文本</span><br>                <span class="hljs-string">&#x27;utf8&#x27;</span>,                   <br>                <span class="hljs-keyword">function</span>(<span class="hljs-params">err,text</span>) &#123;      <span class="hljs-comment">//读取完成，回调</span><br>                    <span class="hljs-keyword">if</span> (err) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);                      <br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Second text file:&#x27;</span>,text);    <span class="hljs-comment">//显示第二段文本</span><br>                    &#125;<br>                &#125;<br>            );<br>        &#125;<br>    &#125;<br>); <br></code></pre></td></tr></table></figure><p>缺点：嵌套使得可读性、可维护性变差，串行加载，时间效率低</p><ul><li>使用async的方式（简洁、高效）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs  = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><br><span class="hljs-keyword">async</span>.<span class="hljs-title function_">series</span>([<br><br><span class="hljs-keyword">function</span>(<span class="hljs-params">cb</span>)&#123;<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;a-text-file.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,cb);<br>&#125;,<br><br><span class="hljs-keyword">function</span>(<span class="hljs-params">cb</span>)&#123;<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;another-text-file.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,cb);<br>&#125;<br><br>],<span class="hljs-keyword">function</span>(<span class="hljs-params">err,value</span>)&#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;File 1:&#x27;</span>,values[<span class="hljs-number">0</span>]);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;File 2:&#x27;</span>,values[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p> async.series取一个函数数组作为参数，并串行执行它们；</p><p>每个函数只能有一个参数，即回调（cb）。cb执行时应该与其他任意回调一样具有相同类型的参数，所以我们将其传入为fs.readFile的参数；</p><p>最后，它们的结果被发送到最后的回调，即async.series的第二个参数。 这些结果被存在一个数组中，它们按async.series第一个参数中的函数的顺序而排列。</p><p>通过async.js，错误处理被简化了，因为如果遇到一个错误，它会返回错误到最后一个回调中，并且不在执行任何其他异步函数。</p><h3 id="三、条件判断"><a href="#三、条件判断" class="headerlink" title="三、条件判断"></a>三、条件判断</h3><p><strong>判等</strong></p><img src="前端开发——JavaScript.assets/image-20220326212616410.png" alt="image-20220326212616410" style="zoom:50%;" /><p><strong>判断空数组</strong></p><p>通过array.length 判断，如果array.length&#x3D;&#x3D;&#x3D;0 ，数组为空</p><p><strong>判断空集合</strong></p><p>通过keys的长度判断，如果Object.keys(obj).length&#x3D;&#x3D;&#x3D;0，集合为空</p><h3 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h3><p><strong>插入</strong></p><p>头插入：<code>数组.unshift(元素)</code></p><p>尾插入：<code>数组.push(元素)</code></p><h3 id="五、script设置点击事件"><a href="#五、script设置点击事件" class="headerlink" title="五、script设置点击事件"></a>五、script设置点击事件</h3><p><strong>方式一：通过addEventListener方法添加</strong></p><ul><li>参数一：执行的事件</li><li>参数二：事件发生后的回调方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">666</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>或者把函数体写在外面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">666</span>);<br>&#125;<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,test);<br></code></pre></td></tr></table></figure><p><strong>方式二：通过元素属性添加</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">btn.onclick = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">666</span>);&#125;<br>或者<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">666</span>);<br>&#125;<br>btn.onclick = test;<br></code></pre></td></tr></table></figure><h3 id="六、script获取控件元素"><a href="#六、script获取控件元素" class="headerlink" title="六、script获取控件元素"></a>六、script获取控件元素</h3><p><strong>方式一：通过document.getElementById(“id”)获取</strong></p><p><strong>方式二：通过css选择器，document.querySelector(#id)获取</strong></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记——bootstrap框架</title>
    <link href="/2022/04/02/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94bootstrap%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/04/02/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94bootstrap%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>bootstrap框架一些常用元素的笔记</p><span id="more"></span><h3 id="一、布局"><a href="#一、布局" class="headerlink" title="一、布局"></a>一、布局</h3><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220321223711524.png" alt="image-20220321223711524"></p><h4 id="列布局"><a href="#列布局" class="headerlink" title="列布局"></a>列布局</h4><p>相当于flex布局</p><table><thead><tr><th>属性</th><th>css</th><th>bootstrap</th></tr></thead><tbody><tr><td>主轴对齐方式</td><td>justify-content: space-between</td><td><br />justify-content-center</td></tr><tr><td>交叉轴对齐方式</td><td>align-items: flex-start</td><td>align-items-start</td></tr><tr><td>子元素交叉轴对齐</td><td>align-self: start</td><td>align-self-start</td></tr></tbody></table><h4 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a>间隙</h4><table><thead><tr><th>属性</th><th>css</th><th>bootstrap</th></tr></thead><tbody><tr><td>内边距</td><td>padding&#x3D;**</td><td>p-5（水平+垂直）  px-5（水平内边距）  py-5（垂直内边距）</td></tr><tr><td>外边距</td><td>margin &#x3D; **</td><td>g-5（水平+垂直）  gx-5（水平外边距）  gy-5（垂直外边距）</td></tr></tbody></table><p>建议在父级容器中添加 overflow-hidden 的类属性</p><h4 id="边界border"><a href="#边界border" class="headerlink" title="边界border"></a>边界border</h4><p>通过添加 border类名 为容器添加边界</p><h3 id="二、文本"><a href="#二、文本" class="headerlink" title="二、文本"></a>二、文本</h3><h4 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h4><table><thead><tr><th>.text-center</th><th>居中</th></tr></thead><tbody><tr><td>.text-start</td><td>居左</td></tr><tr><td>.text-end</td><td>居右</td></tr><tr><td>.text-sm-center</td><td>响应式的对齐方式</td></tr></tbody></table><h4 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h4><table><thead><tr><th>.text-wrap</th><th>自动换行</th></tr></thead><tbody><tr><td>.text-nowrap</td><td>不换行</td></tr><tr><td>.text-break</td><td>文本断行（防止长单词溢出）</td></tr></tbody></table><h4 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h4><table><thead><tr><th>.text-lowercase</th><th>全部转为小写</th></tr></thead><tbody><tr><td>.text-uppercase</td><td>全部转为大写</td></tr></tbody></table><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>.fs-1  .fs-2 …</p><h4 id="字体粗细和斜体"><a href="#字体粗细和斜体" class="headerlink" title="字体粗细和斜体"></a>字体粗细和斜体</h4><p>font-weight通用类别的缩写为.fw-* </p><p>font-style通用类别的缩写为.fst-*</p><table><thead><tr><th>fw-bold</th><th>加粗</th></tr></thead><tbody><tr><td>fw-bolder</td><td>再加粗</td></tr><tr><td>fw-light</td><td>浅色</td></tr><tr><td>fw-lighter</td><td>再浅色</td></tr><tr><td>fst-italic</td><td>斜体</td></tr></tbody></table><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><p>使用.lh-*通用类别来改变行高</p><table><thead><tr><th>lh-base</th><th>1.5倍行高</th></tr></thead><tbody><tr><td>lh-lg</td><td>2倍行高</td></tr></tbody></table><h4 id="旁注小文本"><a href="#旁注小文本" class="headerlink" title="旁注小文本"></a>旁注小文本</h4><p>内联文本元素</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A well-known quote, contained in a blockquote element.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-footer&quot;</span>&gt;</span><br>Someone famous in <span class="hljs-tag">&lt;<span class="hljs-name">cite</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Source Title&quot;</span>&gt;</span>Source Title<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220328181502807.png" alt="image-20220322150011313"></p><h3 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h3><h4 id="无样式"><a href="#无样式" class="headerlink" title="无样式"></a>无样式</h4><p>*注意：只对直接子元素生效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="内联子元素"><a href="#内联子元素" class="headerlink" title="内联子元素"></a>内联子元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline-item&quot;</span>&gt;</span>This is a list item.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="dl-amp-dt-amp-dd"><a href="#dl-amp-dt-amp-dd" class="headerlink" title="dl &amp; dt &amp; dd"></a>dl &amp; dt &amp; dd</h4><p>描述型列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Description lists<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>A description list is perfect for defining terms.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Term<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Definition for the term.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And some more placeholder definition text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Another term<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>This definition is short, so no extra paragraphs or anything.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 text-truncate&quot;</span>&gt;</span>Truncated term is truncated<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>This can be useful when space is tight. Adds an ellipsis at the end.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>Nesting<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>Nested definition list<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-8&quot;</span>&gt;</span>I heard you like definition lists. Let me put a definition list inside your definition list.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220322150011313.png" alt="image-20220322150543976"></p><h3 id="四、图片"><a href="#四、图片" class="headerlink" title="四、图片"></a>四、图片</h3><h4 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h4><p>通过 Bootstrap 所提供的<code>.img-fluid</code> 类让图片支持响应式布局。其原理是将<code>max-width: 100%;</code> 和 <code>height: auto;</code> 赋予图片，以便随父元素一起缩放。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-fluid&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h4><p>200 x 200 尺寸，带有1px宽度的圆形边框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-thumbnail&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><p>.rounded 是一个200 x 200的 img元素</p><ul><li>靠左&#x2F;靠右对齐</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded float-start&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded float-end&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>居中对齐</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">方式一：<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded mx-auto d-block&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>方式二：<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="五、轮廓-Figures"><a href="#五、轮廓-Figures" class="headerlink" title="五、轮廓 Figures"></a>五、轮廓 Figures</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;figure&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;figure-img img-fluid rounded&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;figure-caption text-end&quot;</span>&gt;</span>A caption for the above image.<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220322150543976.png" alt="image-20220322152325398"></p><h3 id="六、表单"><a href="#六、表单" class="headerlink" title="六、表单"></a>六、表单</h3><p><strong>禁用控件：</strong>在属性中添加disabled</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;disabledInput&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Disabled input here...&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>只读文本：</strong>在属性中添加readonly</p><h3 id="七、颜色"><a href="#七、颜色" class="headerlink" title="七、颜色"></a>七、颜色</h3><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220322152325398.png" alt="image-20220328181502807" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记</title>
    <link href="/2022/04/02/Git/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/02/Git/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>学习使用Git过程的一些笔记，方便日常使用查询</p><span id="more"></span><h2 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h2><h3 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h3><ol><li><p>初始化仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>把文件添加到暂存区</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">add</span> <span class="hljs-built_in">file</span>.txt<br></code></pre></td></tr></table></figure></li><li><p>把暂存区的所有文件提交到仓库的当前分支</p><p>一次可以commit多个add的文件，创建仓库时，默认创建一个master分支</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;提交时的描述&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>查看仓库当前状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure></li><li><p>查看修改内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git diff <span class="hljs-built_in">file</span>.txt<br>可以查看 <span class="hljs-built_in">file</span>.txt 与上次提交相比，更改了哪些内容<br></code></pre></td></tr></table></figure></li></ol><h3 id="二、全局配置"><a href="#二、全局配置" class="headerlink" title="二、全局配置"></a>二、全局配置</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、版本回退"><a href="#三、版本回退" class="headerlink" title="三、版本回退"></a>三、版本回退</h3><ol><li><p>查看历史提交记录</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git <span class="hljs-built_in">log</span> [<span class="hljs-comment">--pretty=oneline]</span><br></code></pre></td></tr></table></figure><p>显示从最近到最远的提交日志，添加参数可以精简打印的内容</p></li><li><p>版本回退</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD^</span><br></code></pre></td></tr></table></figure><p>HEAD^ 表示上一个版本，</p><p>也可以通过commit id来更改版本，下面介绍</p></li><li><p>查找commit id ，等同于查阅历史命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log<br></code></pre></td></tr></table></figure><p>将输出类似于下面的东西</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">e475afc HEAD@&#123;<span class="hljs-number">1</span>&#125;: <span class="hljs-keyword">reset</span>: moving <span class="hljs-keyword">to</span> HEAD^<br><span class="hljs-number">1094</span>adb (HEAD -&gt; master) HEAD@&#123;<span class="hljs-number">2</span>&#125;: <span class="hljs-keyword">commit</span>: append GPL<br>e475afc HEAD@&#123;<span class="hljs-number">3</span>&#125;: <span class="hljs-keyword">commit</span>: <span class="hljs-keyword">add</span> distributed<br></code></pre></td></tr></table></figure><p>每行第一个就是commit id</p><p>可以通过下面的命令，<strong>更改到指定版本</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard 1094a</span><br></code></pre></td></tr></table></figure><p>*注：1094a为版本号的前几位</p></li></ol><h3 id="四、撤销修改"><a href="#四、撤销修改" class="headerlink" title="四、撤销修改"></a>四、撤销修改</h3><ul><li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- file</span><br></code></pre></td></tr></table></figure><p>两种情况：</p><ul><li><p>文件修改后，没有<code>git add file</code>到暂存区：</p><p>那么将恢复到上一次commit的状态</p></li><li><p>文件<code>git add file</code>添加到暂存区之后：</p><p>不管有没有做修改，都将恢复到添加到暂存区时的状态</p></li></ul></li><li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，把暂存区的修改也丢掉</p><p>第一步：把暂存区的修改退回工作区</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">git <span class="hljs-keyword">reset</span> HEAD <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- file</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="五、删除文件"><a href="#五、删除文件" class="headerlink" title="五、删除文件"></a>五、删除文件</h3><ul><li><p>删除本地和版本库两个地方的文件</p><p>本地使用本地的删除方法，</p><p>这里介绍git的删除方法：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">git <span class="hljs-keyword">rm</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>删除后需要commit才能生效</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;remove file&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>误删本地文件，从版本库恢复</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- file</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="六、分支管理"><a href="#六、分支管理" class="headerlink" title="六、分支管理"></a>六、分支管理</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>创建一个名为dev的分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch dev</span><br></code></pre></td></tr></table></figure><p>创建的新分支，建立在当前分支的基础上</p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220323103134658.png" alt="image-20220323103134658" style="zoom:50%;" /><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>从当前分支切换到dev分支</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">git <span class="hljs-keyword">switch</span> dev<br></code></pre></td></tr></table></figure><p>创建并切换分支</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git <span class="hljs-keyword">switch</span> -<span class="hljs-keyword">c</span> dev<br></code></pre></td></tr></table></figure><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>将指定分支合并到当前分支，例如：当前分支为master，下面命令将dev分支合并到master分支上</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> dev  这种方式删除分支后，会丢掉分支信息<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">merge</span> <span class="hljs-comment">--no-ff dev   这种方式从分支历史上就可以看出分支信息</span><br></code></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>删除dev分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -d dev</span><br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">git</span> <span class="hljs-variable">branch</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-variable">dev</span>  强行删除一个没有被合并过的新分支<br></code></pre></td></tr></table></figure><h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><ul><li>分工合作策略</li></ul><table><thead><tr><th>master</th><th>稳定版本的分支</th></tr></thead><tbody><tr><td>dev</td><td>实际工作过程中使用的主分支，dev完成阶段任务时，才把dev分支合并到master上</td></tr><tr><td>user1</td><td>工作分支一，在dev分支的基础上创建，完成任务后，合并到dev分支</td></tr><tr><td>user2</td><td>工作分支二</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220323104839946-16488933038285.png" alt="image-20220323104839946"></p><ul><li>依赖分支实现的版本管理策略（串行策略）</li></ul><table><thead><tr><th>master</th><th>最新分支</th></tr></thead><tbody><tr><td>dev1</td><td>工作阶段一分支，完成后在此分支上创建dev2，合并dev1到master，切换都dev2继续工作</td></tr><tr><td>dev2</td><td>工作阶段二分支，同上</td></tr><tr><td>…</td><td></td></tr><tr><td>dev9</td><td>最后一个工作阶段，完成后，合并dev9到master，不必再创建新分支</td></tr></tbody></table><p>这样就实现了一个分支一个版本</p><h3 id="七、远程仓库"><a href="#七、远程仓库" class="headerlink" title="七、远程仓库"></a>七、远程仓库</h3><p><strong>查看远程仓库信息</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><p><strong>推送分支</strong></p><p>推送时，要指定本地分支（如：master），git会把该分支推送到远程库的对应分支上</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>如果是在远程仓库新建分支，可以加上-u参数，这样可以把本地分支和远程分支关联起来，下次push就可以省略远程分支名</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p><strong>抓取分支</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">克隆链接</span><br></code></pre></td></tr></table></figure><p>默认只能抓取master分支</p><p><strong>多人协作</strong></p><p>抓取了master分支后，在本地创建dev分支，在dev分支修改；</p><p>创建本地dev分支与远程&#x2F;origin&#x2F;dev分支点链接</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">git branch --<span class="hljs-built_in">set</span>-upstream-to=origin/<span class="hljs-built_in">dev</span> <span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>要推送到远程库时，先git pull 把最新的提交从origin&#x2F;dev抓取下来，在本地合并（git pull自动完成）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><p>解决冲突（如果有需要的话）</p><p>最后<code>git push</code></p><h3 id="八、标签tag"><a href="#八、标签tag" class="headerlink" title="八、标签tag"></a>八、标签tag</h3><p>标签是版本库的一个快照，是指向某个commit的指针</p><h4 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h4><p><strong>在当前分支当前commit打上标签v1.0</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">v1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>对指定的commit打标签</strong></p><p>v1.0是标签，  f52c633是commit id，可以通过git log查找</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">v1</span>.<span class="hljs-number">0</span> f52c633<br></code></pre></td></tr></table></figure><p>创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">-a</span> v1.<span class="hljs-number">0</span> -m <span class="hljs-string">&quot;version 1.0 released&quot;</span> <span class="hljs-number">1094</span>adb<br></code></pre></td></tr></table></figure><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><p><strong>查看所有标签</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p><strong>查看指定标签信息</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">show </span><span class="hljs-built_in">v1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h4><p>将本地标签推送到远程库</p><p><strong>推送指定标签</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> origin <span class="hljs-built_in">v1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>推送所有未推送的标签</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> --tags<br></code></pre></td></tr></table></figure><p><strong>删除远程标签</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">git push origin <span class="hljs-symbol">:refs/tags/v1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="九、-gitignore"><a href="#九、-gitignore" class="headerlink" title="九、.gitignore"></a>九、.gitignore</h3><p>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件</p><p>例如：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Windows:<br>Thumbs.db<br>ehthumbs.db<br>Desktop.ini<br><br># My configurations:<br>db.ini<br>deploy_key_rsa<br><br># 排除所有.开头的隐藏文件:<br>.*<br># 排除所有.<span class="hljs-keyword">class</span>文件:<br>*.<span class="hljs-keyword">class</span><br><br># 不排除.gitignore和App.<span class="hljs-keyword">class</span>:<br>!.gitignore<br>!App.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><h3 id="十、查看提交历史"><a href="#十、查看提交历史" class="headerlink" title="十、查看提交历史"></a>十、查看提交历史</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git</span> <span class="hljs-comment">log</span> --<span class="hljs-comment">graph</span> --<span class="hljs-comment">pretty=oneline</span> --<span class="hljs-comment">abbrev</span><span class="hljs-literal">-</span><span class="hljs-comment">commit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构——栈</title>
    <link href="/2022/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%88/"/>
    <url>/2022/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>STL 栈的常用函数、算法题</p><span id="more"></span><h1 id="C-Stack（栈）"><a href="#C-Stack（栈）" class="headerlink" title="C++ Stack（栈）"></a>C++ Stack（栈）</h1><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><table><thead><tr><th><a href="https://www.cainiaojc.com/cpp/cpp-stack-empty-function.html">empty</a></th><th>该函数用于测试堆栈是否为空。如果堆栈为空，则该函数返回true，否则返回false。</th></tr></thead><tbody><tr><td><a href="https://www.cainiaojc.com/cpp/cpp-stack-size-function.html">size</a></td><td>该函数返回堆栈容器的大小，该大小是堆栈中存储的元素数量的度量。</td></tr><tr><td><a href="https://www.cainiaojc.com/cpp/cpp-stack-top-function.html">top</a></td><td>该函数用于访问堆栈的顶部元素。该元素起着非常重要的作用，因为所有插入和删除操作都是在顶部元素上执行的。</td></tr><tr><td><a href="https://www.cainiaojc.com/cpp/cpp-stack-push-function.html">push</a></td><td>该函数用于在堆栈顶部插入新元素。</td></tr><tr><td><a href="https://www.cainiaojc.com/cpp/cpp-stack-pop-function.html">pop</a></td><td>该函数用于删除元素，堆栈中的元素从顶部删除。</td></tr><tr><td>swap</td><td>该函数用于交换引用的两个容器的内容。</td></tr></tbody></table><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>Q1：栈空的时候，使用top访问，或者使用pop会发生什么？</p><p>A1：栈空的时候，使用top和使用pop都会发生访问错误，程序会报错终止。</p><h4 id="leetcode题库"><a href="#leetcode题库" class="headerlink" title="leetcode题库"></a>leetcode题库</h4><table><thead><tr><th>题目</th><th>备注</th></tr></thead><tbody><tr><td>20.有效的括号（简单）</td><td>简单的匹配前后括号(),{},[]</td></tr><tr><td>32.最长的括号（困难）</td><td>计算最长有效括号，分两种情况：()()和(())，巧妙地利用栈和右括号下标</td></tr><tr><td>42.接雨水（困难）</td><td></td></tr><tr><td>71.简化路径（中等）</td><td>标准化输入路径的题目，借鉴编译原理gettoken函数，难点在于需要考虑的情况和细节比较多</td></tr><tr><td>84.柱状图中最大的矩形（困难）</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发——CSS</title>
    <link href="/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94CSS/"/>
    <url>/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94CSS/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS-（Cascading-Style-Sheets-，级联样式表）"><a href="#CSS-（Cascading-Style-Sheets-，级联样式表）" class="headerlink" title="CSS  （Cascading Style Sheets ，级联样式表）"></a>CSS  （Cascading Style Sheets ，级联样式表）</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发——HTML</title>
    <link href="/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94HTML/"/>
    <url>/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94HTML/</url>
    
    <content type="html"><![CDATA[<p>HyperText Markup Language 不是一门编程语言，而是一种用来告知浏览器如何组织页面的<strong>标记语言</strong></p><span id="more"></span><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HyperText Markup Language 不是一门编程语言，而是一种用来告知浏览器如何组织页面的<strong>标记语言</strong></p><p><strong>（注：以下所有html标签，都在&lt; 后面增加了一个空格，以避免被编辑器识别为html元素）</strong></p><p><strong>元素（Element）</strong></p><p>标签+内容，组成了元素，HTML就是由一系列元素组成的。<strong>注意：HTML 标签不区分大小写</strong></p><p><strong>属性（Attribute）</strong></p><h3 id="一、剖析元素"><a href="#一、剖析元素" class="headerlink" title="一、剖析元素"></a>一、剖析元素</h3><p><strong>文字样式的元素</strong></p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&lt; i&gt;&lt; &#x2F;i&gt;</td><td>斜体</td></tr><tr><td>&lt; strong&gt;&lt; &#x2F;strong&gt;</td><td>加粗，表示重要性</td></tr><tr><td>&lt; del&gt;&lt; &#x2F;del&gt;</td><td>删除线</td></tr><tr><td>&lt; u&gt;&lt; &#x2F;u&gt;</td><td>下划线</td></tr></tbody></table><p><strong>文字排版的元素</strong></p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&lt; p&gt; &lt; &#x2F;p&gt;</td><td>段落</td></tr><tr><td>&lt; br&gt;</td><td>换行</td></tr></tbody></table><p><strong>块级元素 &amp; 内联元素</strong></p><ul><li><p><strong>块级元素</strong>在页面中以块的形式展现，会换行</p></li><li><p><strong>内联元素</strong>出现在<strong>块级元素</strong>里面，不换行</p><p>常见的内联元素：</p><table><thead><tr><th>标签</th><th>描述</th><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&lt; a&gt;&lt; &#x2F;a&gt;</td><td>超链接</td><td>&lt; br&gt;</td><td>换行符号</td></tr><tr><td>&lt; audio&gt;</td><td>在文档中嵌入音频</td><td>&lt; button&gt;</td><td>按钮</td></tr><tr><td>&lt; canvas&gt;</td><td>被用来通过 JavaScript绘制图形及图形动画</td><td>&lt; code&gt;&lt; &#x2F;code&gt;</td><td>代码块</td></tr><tr><td>&lt; i&gt;&lt; &#x2F;i&gt;</td><td>用于表现因某些原因需要区分普通文本的一系列文本</td><td>&lt; iframe&gt;</td><td><strong>内联框架元素</strong></td></tr><tr><td>……</td><td></td><td></td><td></td></tr></tbody></table></li></ul><p><strong>语义元素</strong></p><p>HTML，有很多标签的原因之一在于，每种标签都有对应的语义，尽管它们在样式上的表现可能相差无几，我想这么做的原因应该是为了方便读取数据，比如爬取数据时，可以通过标签的名字来获取到对应所需要的内容，而且使用对应语义的元素标签也会使得HTML的可读性更强</p><table><thead><tr><th>标签</th><th>描述</th><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&lt; address&gt;</td><td>地址</td><td>&lt; em&gt;</td><td>表示强调或重读</td></tr><tr><td>&lt; article&gt;</td><td>独立的内容项目，如文章、评论等</td><td>&lt; strong&gt;</td><td>表示重要性</td></tr><tr><td>&lt; details&gt;</td><td>创建一个挂件，仅在被切换成展开状态时，它才会显示内含的信息</td><td>&lt; mark&gt;</td><td>表示相关性</td></tr><tr><td>&lt; dialog&gt;</td><td>对话框盒子</td><td>&lt; dfn&gt;</td><td>标记术语的定义实例</td></tr><tr><td>&lt; dl&gt;</td><td>描述列表</td><td>&lt; cite&gt;</td><td>标记著作者</td></tr></tbody></table><p><strong>空元素</strong></p><p>一个元素只有一个标签，没有结束标签的元素，如&lt; img&gt; ，通常用来插入一些东西</p><h3 id="二、剖析HTML文档"><a href="#二、剖析HTML文档" class="headerlink" title="二、剖析HTML文档"></a>二、剖析HTML文档</h3><p><strong>（以下所有的标签，在&lt; 后面都多加了一个空格，以避免被编辑器识别为html文本，实际使用时需要去掉那个空格）</strong></p><p><strong>&lt; !DOCTYPE html&gt;</strong></p><p>是现在是最短有效的文档声明</p><p><strong>&lt; html&gt;&lt; &#x2F;html&gt;</strong></p><p>包裹了整个完整的页面，是一个根元素</p><p><strong><!-- -->注释</strong></p><h4 id="head-元数据"><a href="#head-元数据" class="headerlink" title="head 元数据"></a>head 元数据</h4><p><strong>&lt; head&gt;&lt; &#x2F;head&gt;</strong></p><p>包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容</p><p>包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等</p><p><strong>&lt; title&gt;&lt; &#x2F;title&gt;</strong></p><p> 设置页面标题，出现在浏览器标签上，当你标记&#x2F;收藏页面时它可用来描述页面</p><p><strong>&lt; meta charset&#x3D;”utf-8”&gt;</strong></p><p>设置文档使用utf-8字符集编码</p><p><strong>meta 添加元数据</strong></p><ul><li><code>name</code> 指定了meta 元素的类型； 说明该元素包含了什么类型的信息。</li><li><code>content</code> 指定了实际的元数据内容</li></ul><p>description也被使用在<strong>搜索引擎显示的结果</strong>页中，如下，content的内容将显示在搜索页面中</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;The MDN Web Docs site</span><br><span class="hljs-string">    provides information about Open Web technologies</span><br><span class="hljs-string">    including HTML, CSS, and APIs for both Web sites and</span><br><span class="hljs-string">    progressive web apps.&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>添加自定义图标</strong>，显示在标签页标题左边的小图标，设置方法，在head中添加如下代码，大多数浏览器都可以支持.gif和.png格式了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>添加CSS</strong>，属性：<code>rel:&quot;stylesheet&quot; href:文件路径</code></p><h4 id="body-主体"><a href="#body-主体" class="headerlink" title="body 主体"></a>body 主体</h4><p><strong>&lt; body&gt;&lt; &#x2F;body&gt;</strong></p><p>页面上显示的所有元素，script标签可以添加到body内，<strong>事实上，把script放在文档尾部是一个更好的选择</strong>，这样可以确保先解析html内容之后才加载脚本，避免因为脚本找不到某个元素而出错，<strong>script需要开始和结束标签</strong>，因为它既可以引用外部标签，也可以把脚本写在script元素内</p><h3 id="三、实体引用"><a href="#三、实体引用" class="headerlink" title="三、实体引用"></a>三、实体引用</h3><table><thead><tr><th align="left">原义字符</th><th align="left">等价字符引用</th></tr></thead><tbody><tr><td align="left">&lt;</td><td align="left">&amp;lt ;</td></tr><tr><td align="left">&gt;</td><td align="left">&amp;gt ;</td></tr><tr><td align="left">“</td><td align="left">&amp;quot ;</td></tr><tr><td align="left">‘</td><td align="left">&amp;apos ;</td></tr><tr><td align="left">&amp;</td><td align="left">&amp;amp ;</td></tr></tbody></table><p><strong>注：等价字符的字符与分号;之间并没有空格，这里为了能够显示出来，多加了空格</strong></p><p>以上仅列出一些常用的引用，更多可参考<a href="http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references">XML和HTML字符实体引用列表</a></p><h3 id="四、常用元素"><a href="#四、常用元素" class="headerlink" title="四、常用元素"></a>四、常用元素</h3><h4 id="lt-a-gt-链接"><a href="#lt-a-gt-链接" class="headerlink" title="&lt; a&gt; 链接"></a>&lt; a&gt; 链接</h4><table><thead><tr><th>href</th><th>链接地址</th></tr></thead><tbody><tr><td>title</td><td>鼠标悬停时，以工具提示显示的信息</td></tr><tr><td>target</td><td>跳转链接的方式，如”_blank”为打开新标签页</td></tr><tr><td>download</td><td>当链接是下载资源时，使用download属性提供一个默认的保存文件名，仅适用于<strong>同源URL</strong>（host相同）</td></tr></tbody></table><h4 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h4><p><strong>HTML 内联框架元素 (<code>&lt;iframe&gt;</code>)</strong> 表示嵌套的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Browsing_context">browsing context</a>。它能够将另一个 HTML 页面嵌入到当前页面中。</p><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220401171641215.png" alt="image-20220401171641215"></p><h3 id="五、文字基础"><a href="#五、文字基础" class="headerlink" title="五、文字基础"></a>五、文字基础</h3><p><strong>标题和段落</strong></p><ul><li>您应该最好只对每个页面使用一次&lt; h1&gt; — 这是顶级标题，所有其他标题位于层次结构中的下方</li><li>在可用的六个标题级别中，您应该只在每页使用不超过三个</li></ul><p><strong>语义标签</strong></p><p>我们可以通过css样式让任何一个标签达到我们想要的外形效果，但是在别人阅读这份html时可能很难理解该部分属于哪一个结构。所以使用语义化标签是必要的，也是html存在那么多标签的意义。</p><p>我之前使用类名或id的方式来标注每个标签代表的含义，但是这样仍然不够直观，不能够让人一眼就看出来每个标签所代表的结构内容 </p><p><strong>高级文字排版</strong></p><ol><li><p><strong>引用</strong>，引用会有默认的缩进，<strong>cite属性</strong>可以添加引用的链接，但是要使用JS或者CSS，浏览器才会显示cite的内容</p><p><strong>行内引用 &lt; q&gt;</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 这是引文：<span class="hljs-tag">&lt;<span class="hljs-name">q</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span> 水调歌头——苏轼 <span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是引文：<q cite=""> 水调歌头——苏轼</q></p><p><strong>块引用 &lt; blockquote cite&#x3D;””&gt;</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一段引用：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>水调歌头——苏轼<span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是一段引用：</p><blockquote cite="">水调歌头——苏轼</blockquote></li><li><p><strong>描述列表 &lt; dl&gt;</strong></p><dl>    <dt>小标题一</dt>    <dd>        描述一    </dd>    <dt>小标题二</dt>    <dd>        描述二    </dd></dl></li><li><p><strong>缩略语 &lt; abbr&gt;</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我们使用 <span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;超文本标记语言（Hyper text Markup Language）&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span> 来组织网页文档。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们使用 <abbr title="超文本标记语言（Hyper text Markup Language）">HTML</abbr> 来组织网页文档。</p></li><li><p>**上标 &lt; sup&gt;  下标 &lt; sub&gt; **</p><p>x<sup>2</sup>  x<sub>2</sub></p></li><li><p><strong>代码块</strong></p><ul><li>&lt; code&gt;: 用于标记计算机通用代码。</li><li>&lt; pre&gt;: 用于保留空白字符（通常用于代码块）——如果您在文本中使用缩进或多余的空白，浏览器将忽略它，您将不会在呈现的页面上看到它。但是，如果您将文本包含在<code>&lt;pre&gt;&lt;/pre&gt;</code>标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。</li><li>&lt; kbd&gt;: 用于标记输入电脑的键盘（或其他类型）输入。</li><li>&lt; samp&gt;: 用于标记计算机程序的输出。</li></ul><p>请不要使用 <code>&lt;font&gt;</code> 、 <code>&lt;center&gt;</code> 等表象元素。</p><p>在上述的 JavaScript 示例中，<var>para</var> 表示一个段落元素。</p><p>按 <kbd>Ctrl</kbd>/<kbd>Cmd</kbd> + <kbd>A</kbd> 选择全部内容。</p><div class="code-wrapper"><pre>$ <kbd>ping mozilla.org</kbd><samp>PING mozilla.org (63.245.215.20): 56 data bytes64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms</samp></pre></div></li><li><p><strong>时间和日期 &lt; time datetime&#x3D;””&gt;</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;time datetime=<span class="hljs-string">&quot;2016-01-20&quot;</span>&gt;</span><span class="hljs-attribute">2016</span>年<span class="hljs-number">1</span>月<span class="hljs-number">20</span>日&lt;/time&gt;<br></code></pre></td></tr></table></figure><p><time datetime="2016-01-20">2016年1月20日</time></p></li></ol><h3 id="六、网页架构"><a href="#六、网页架构" class="headerlink" title="六、网页架构"></a>六、网页架构</h3><p>一般都网页布局包含了以下5个部分</p><p><strong>导航栏</strong>，指向各个子页面的链接，以及网站标题，导航栏应该始终保持一致</p><p><strong>页眉</strong>，通常横跨于页面顶部的大标题、大图、大标志，是网站的主要信息</p><p><strong>主内容</strong>，位于页面的中心部分，放置重要的内容</p><p><strong>侧边栏</strong>，一些少量的信息，如介绍、子导航、引用等</p><p><strong>页脚</strong>，横跨页面底部的狭长区域，一般放置一些公共信息，如版权声明、联系方式。有一些网站也习惯将链接导航放置到页脚</p><p>对应的，HTML提供了相关的语义标签</p><p><strong>&lt; nav&gt; 导航栏</strong>，其中不应包含二级链接等内容</p><p><strong>&lt; header&gt; 页眉</strong></p><p><strong>&lt; main&gt; 主内容</strong>，每个页面上只能用一次 <code>&lt;main&gt;</code>，且直接位于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body">&#96;&#96;</a> 中。最好不要把它嵌套进其它元素</p><p><strong>&lt; aside&gt; 侧边栏</strong></p><p><strong>&lt; footer&gt; 页脚</strong></p><p>还有其它一些<strong>常用的语义标签</strong></p><p><strong>&lt; article&gt; ，</strong>包围的内容即一篇文章，与页面其它部分无关（比如一篇博文）</p><p><strong>&lt; section&gt; ，</strong>适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块</p><p>一般的<strong>最佳用法</strong>是：以 <a href="https://developer.mozilla.org/en-US/Learn/HTML/Howto/Set_up_a_proper_title_hierarchy">标题</a> 作为开头；把一篇 <code>&lt;article&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;section&gt;</code> 中</p><p><strong>无语义标签</strong></p><p><strong>&lt; div&gt; ，</strong>一般用于没有特殊语义，或者找不到想要的语义标签，但是又要实现特殊的CSS样式或JS脚本</p><p><strong>&lt; span&gt; ，</strong>内联的（inline）无语义元素，最好用于没有特定语义的情况</p><p><strong>换行和水平分割线</strong></p><p><strong>&lt; br&gt;，换行</strong></p><p><strong>&lt; hr&gt;，水平分割线</strong></p><h3 id="七、验证错误"><a href="#七、验证错误" class="headerlink" title="七、验证错误"></a>七、验证错误</h3><p>验证服务网站 <a href="https://validator.w3.org/">Markup Validation Service</a>，由W3C组织提供的标记验证服务</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发——Web开发概述</title>
    <link href="/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>了解Web开发相关知识的意义在于</p><span id="more"></span><h2 id="Web开发概述"><a href="#Web开发概述" class="headerlink" title="Web开发概述"></a>Web开发概述</h2><p>了解Web开发相关知识的意义在于，Web拥有一套标准，“<strong>Web 标准</strong>是我们用来建立 Web 网站的技术。这些标准存在于名为规范的较长的技术文档中，该文档详细说明了技术应如何工作“。它规定了web如何工作，这对于从底层去理解、提升web应用的性能具有关键作用。</p><p>而且标准是不断更新的，所以意味着该行业的从业人员也需要时刻保持学习，以适应最新的标准。</p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><ul><li>可用于运行测试以显示您的代码是否按预期运行的 <a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing">测试工具（ Testing tools ）</a>，<strong>跨浏览器测试</strong></li><li>现代浏览器中的 <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools">开发人员工具（ developer tools ）</a>可用于<strong>调试代码</strong></li><li>所谓的 “ Linters” ，它包含了一组规则，检查您的代码之后，会突出显示您未正确遵循规则的地方</li><li>Minifiers ，它将代码文件中的所有空格删除以使其更小，从而可以更快地从服务器下载</li></ul><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><p>前端语言：HTML ， CSS 和 JavaScript</p><p>后端语言，或者叫服务器端语言：ASP.NET ， Python ， PHP 和 NodeJS </p><h4 id="考虑的问题"><a href="#考虑的问题" class="headerlink" title="考虑的问题"></a>考虑的问题</h4><p><strong>跨浏览器兼容性（ Cross-browser compatibility ）</strong>，确保能在尽可能多，包括老旧的设备浏览器上运行</p><p><strong>响应式网页设计（ Responsive Web design ）</strong>，确保能在不同尺寸的浏览器界面中都有良好的浏览体验</p><p><strong>性能（ Performance ）</strong>，尽可能快加载网站，简单易用</p><p><strong>可访问性（ Accessibility ）</strong></p><p><strong>隐私与安全（ Privacy &amp; Security ）</strong>，隐私是指允许人们私下从事其业务，而不是监视他们或收集您绝对不需要的更多数据。安全性是指以安全的方式构建您的网站，以使恶意用户无法从您或您的用户那里窃取信息。</p><h4 id="Web是如何工作的"><a href="#Web是如何工作的" class="headerlink" title="Web是如何工作的"></a>Web是如何工作的</h4><p><strong>第一步</strong>，浏览器输入一个网址，向服务器端发送request，请求拷贝一份网页</p><p><strong>第二步</strong>，服务器端收到请求后，返回一个同意信息，接着把网页文件以数据包的形式发送给浏览器</p><p><strong>第三步</strong>，浏览器解析网页文件。<strong>首先</strong>，从HTML文件中识别出所有”link”和”script”，获取外部文件的链接，一边继续解析HTML文件，一边根据外部文件链接向服务器发送请求，获取再解析CSS和JavaSript文件；<strong>接着</strong>，给解析后的HTML生成一个<strong>DOM树</strong>，给CSS<strong>生成一个CSSOM树</strong>保存在内存中，编译执行解析度JavaScript文件；<strong>最后</strong>，网页界面展示出来。</p><h4 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h4><p>也称<strong>信息架构</strong>，规划整个网站内容，需要哪些页面、如何排列组合这些页面、如何互相进行链接</p><p><strong>第一步</strong>，头脑风暴所有需要实现的内容</p><p><strong>第二步</strong>，将所有内容分组罗列出来</p><p><strong>第三步</strong>，绘制站点草图，使用框框作为页面，连线表示页面之间的链接，有点像<strong>UML</strong></p><p><strong>第四步</strong>，确定所有页面的通用部分，一般为导航栏、页脚</p><p><strong>第五步</strong>，绘制网页布局草图</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="/2022/03/12/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/12/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Hexo常用命令</p><span id="more"></span><h3 id="一、写作"><a href="#一、写作" class="headerlink" title="一、写作"></a>一、写作</h3><ol><li><p><strong>新建空白文档</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs xml">hexo n [layout] <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>layout分为：post、page、draft，默认为post</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p><strong>用法实例：</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> --path 前端开发/前端开发——Web开发基础 <span class="hljs-string">&quot;前端开发——Web开发概述&quot;</span><br>如果没有最后<span class="hljs-string">&quot;&quot;</span>里面的标题，只会创建文件名为“前端开发——Web开发基础”的文件，title为模板默认值。如果指定的文件目录不存在，则会新建文件目录<br></code></pre></td></tr></table></figure></li><li><p><strong>Front-matter</strong></p><table><thead><tr><th>参数</th><th>描述</th><th>用法</th></tr></thead><tbody><tr><td>title</td><td>文章标题、文件名</td><td></td></tr><tr><td>tags</td><td>标签</td><td>tags: - PS3 - Games</td></tr><tr><td>categories</td><td>分类</td><td>categories: - Diary</td></tr><tr><td>index_img</td><td>首页的缩略图</td><td>index_img: &#x2F;img&#x2F;yangtai&#x2F;p1.jpg</td></tr><tr><td>banner_img</td><td>详细页的顶部背景大图</td><td>banner_img: &#x2F;img&#x2F;yangtai&#x2F;p2.jpg</td></tr><tr><td>comments</td><td>开关文章的评论功能</td><td>comments: true（默认） &#x2F; false</td></tr></tbody></table></li></ol><h3 id="二、发布"><a href="#二、发布" class="headerlink" title="二、发布"></a>二、发布</h3><ol><li><p>生成静态文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure></li><li><p>本地预览</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo s  启动服务器。默认情况下，访问网址为： http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span>/<br></code></pre></td></tr></table></figure></li><li><p>部署网站</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="三、自定义"><a href="#三、自定义" class="headerlink" title="三、自定义"></a>三、自定义</h3><h4 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h4><p>在hexo的<code>scaffolds</code>目录下有三个<code>md</code>文档，按需修改模板即可</p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220312210202990.png" alt="image-20220312210202990" style="zoom:50%;" /><h4 id="自定义默认背景图片"><a href="#自定义默认背景图片" class="headerlink" title="自定义默认背景图片"></a>自定义默认背景图片</h4><p>修改主题配置_config.fluid中的post.banner_img</p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220312212321936.png" alt="image-20220312212321936" style="zoom:50%;" /><h3 id="四、资源文件夹"><a href="#四、资源文件夹" class="headerlink" title="四、资源文件夹"></a>四、资源文件夹</h3><p>资源，指除了文章文本之外的所有文件，诸如：图片（包括文章里的配图）、CSS、JS文件等。</p><p>如果这些资源存放在本地，那么只能在本地服务器上正常浏览使用它们，通过网站浏览时将无法加载。</p><p>针对图片的一种做法是，设置Toypra等markdown编辑器的 <strong>图片上传</strong>功能，接着类似于github提供的<strong>图床</strong>服务，使网站上的在线文档能够正常加载图片。</p><p>另外一种，也就是这里推荐的做法是，使用Hexo的 <strong>相对路径引用的标签插件</strong>。介绍如下：</p><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的<a href="https://hexo.io/docs/tag-plugins#Include-Assets">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_path</span> slug %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> slug [title] %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_link</span> slug [title] %&#125;</span><br></code></pre></td></tr></table></figure><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#123;<span class="hljs-symbol">%</span> asset_img <span class="hljs-built_in">example</span>.jpg This <span class="hljs-built_in">is</span> an <span class="hljs-built_in">example</span> <span class="hljs-built_in">image</span> <span class="hljs-symbol">%</span>&#125;<br></code></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><p>使用这个<strong>便签插件</strong>，首先要调整config.yml的设置，将post_asset_folder设置为true，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>之后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。<strong>这个资源文件夹将会有与这个文章文件一样的名字</strong>。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们</p><p><strong>重点！！实际尝试发现，这种方式体验很差，因为使用标签插件的时候Typora就无法预览到图片</strong></p><p>所以还是放弃这种方式，改为使用github图床吧，这样虽然加载慢一点，但是起码三个地方都可以访问到</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云发布网页Apache</title>
    <link href="/2022/03/12/%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%91%E5%B8%83%E7%BD%91%E9%A1%B5Apache/"/>
    <url>/2022/03/12/%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%91%E5%B8%83%E7%BD%91%E9%A1%B5Apache/</url>
    
    <content type="html"><![CDATA[<p>通过apache在阿里云服务器上发布本地制作的网页</p><span id="more"></span><ul><li>服务器：阿里云轻量化云服务器</li><li>系统：CentOS 7</li></ul><h3 id="一、安装Apache"><a href="#一、安装Apache" class="headerlink" title="一、安装Apache"></a>一、安装Apache</h3><h4 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h4><ol><li><p>安装apache</p><p>yum install httpd</p></li><li><p>设置服务器开机自动启动Apache</p><p>systemctl enable httpd.service</p></li><li><p>手动启动Apache</p><p>systemctl start httpd.service</p><p>扩展命令</p><p>手动停止Apache  systemctl stop httpd.service<br>手动重启Apache  systemctl restart httpd.service</p></li><li><p>测试Apache启动结果</p><p>systemctl is-enabled httpd.service<br>如果结果为enable，则启动成功</p><p>也可以在浏览器输入ip地址进行访问，如果安装成功，将会出现apache的首页</p></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>apache2 默认的几个配置文件：</li></ul><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;apache2&#x2F;apache2.conf</td><td>主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)</td></tr><tr><td>&#x2F;etc&#x2F;apache2&#x2F;ports.conf</td><td>始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口</td></tr><tr><td>&#x2F;etc&#x2F;apache2&#x2F;sites-enabled &#x2F;etc&#x2F;apache2&#x2F;conf-enabled &#x2F;etc&#x2F;apache2&#x2F;mods-enabled</td><td>其它配置文件</td></tr></tbody></table><ul><li><p><strong>默认web目录：&#x2F;var&#x2F;www&#x2F;html</strong>，在&#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf 里可以看到这个 DocumentRoot &#x2F;var&#x2F;www&#x2F;html 配置</p></li><li><p><strong>默认用户是 www-data</strong>，定义在 &#x2F;etc&#x2F;apache2&#x2F;envvars 文件中</p></li><li><p><strong>设置默认主页的配置文件：&#x2F;etc&#x2F;apache2&#x2F;mods-enabled&#x2F;dir.conf</strong></p></li></ul><h3 id="二、访问测试"><a href="#二、访问测试" class="headerlink" title="二、访问测试"></a>二、访问测试</h3><p>浏览器访问 localhost:80</p><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220312174122367.png" alt="image-20220312174122367"></p><h3 id="三、上传网页"><a href="#三、上传网页" class="headerlink" title="三、上传网页"></a>三、上传网页</h3><p>Apache安装成功之后，在&#x2F;var下面会多出一个.&#x2F;www文件夹，使用XFtp将html文件和所需的css、js、以及其它资源文件夹一并上传到&#x2F;var&#x2F;www&#x2F;html 文件夹下即可</p><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220312200709944.png" alt="image-20220312200709944"></p><p>上传完成后，在浏览器中输入ip地址即可访问上传的网页</p><p><img src="https://raw.githubusercontent.com/Qiuzcc/images/master/imgs/image-20220312200921295.png" alt="image-20220312200921295"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建网站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阳台改造方案</title>
    <link href="/2022/02/28/%E9%98%B3%E5%8F%B0%E6%94%B9%E9%80%A0%E6%96%B9%E6%A1%88/"/>
    <url>/2022/02/28/%E9%98%B3%E5%8F%B0%E6%94%B9%E9%80%A0%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h3 id="一、改造目的"><a href="#一、改造目的" class="headerlink" title="一、改造目的"></a>一、改造目的</h3><p>利用闲置的阳台一角，搭建一个简易的家庭图书角</p><h3 id="二、改造内容"><a href="#二、改造内容" class="headerlink" title="二、改造内容"></a>二、改造内容</h3><ul><li>翻新墙面</li><li>增加物品<ol><li>书架+射灯</li><li>落地台灯</li><li>单人沙发</li><li>小茶几</li><li>氛围灯带</li><li>地毯</li></ol></li></ul><h3 id="三、配色方案"><a href="#三、配色方案" class="headerlink" title="三、配色方案"></a>三、配色方案</h3><ul><li>基础色</li><li>主配色</li><li>点缀色</li></ul><table><thead><tr><th>物品</th><th>色调</th></tr></thead><tbody><tr><td>墙面</td><td>浅蓝+花白 &#x2F; 少白</td></tr><tr><td>书架</td><td>原木色</td></tr><tr><td>茶几</td><td>白色+实木色</td></tr><tr><td>沙发榻榻米</td><td>玉米黄</td></tr><tr><td>地毯(PUD材料)</td><td>橙黄色调</td></tr><tr><td>落地台灯</td><td>白色</td></tr><tr><td>氛围灯带（灯光）</td><td>暖白色</td></tr></tbody></table><h3 id="四、成本计算"><a href="#四、成本计算" class="headerlink" title="四、成本计算"></a>四、成本计算</h3><table><thead><tr><th>物品</th><th>成本</th></tr></thead><tbody><tr><td>北欧简约书架</td><td>166</td></tr><tr><td>简约茶几（双层）</td><td>54</td></tr><tr><td>三棵树内墙乳胶漆</td><td>146</td></tr><tr><td>落地台灯</td><td>141</td></tr><tr><td>沙发椅</td><td>273</td></tr><tr><td>氛围灯带+射灯</td><td>82</td></tr><tr><td>地毯</td><td>149</td></tr><tr><td></td><td></td></tr><tr><td>滚筒刷（3把）+延长杆</td><td>26</td></tr><tr><td>插座</td><td>36</td></tr><tr><td>走线卡扣</td><td>7</td></tr></tbody></table><ul><li>材料总成本：1080</li></ul><h3 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h3><p>​ 临近过年回家前，突然起了一个改造阳台的想法。边复习边做计划，在网上购买装修物品，回家之后马上开始动手，刷墙、接线、搭书架、铺地毯，连续干了两天多，一步一步把脑海中的想法实现出来，利用原来闲置的阳台一角，搭出了一个简易的图书角。明亮的灯光、整洁的墙面地面，营造出了一种温馨的环境氛围。 ——2022年2月1日</p>]]></content>
    
    
    <categories>
      
      <category>日常文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
